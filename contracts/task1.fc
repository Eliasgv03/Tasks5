#include "imports/stdlib.fc";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}
() recv_external(slice messagge) impure {
    slice s = get_data().begin_parse();
    int pkey = s~load_uint(256);
    int etime = s~load_uint(32);
    slice r = s~load_msg_addr();
    int seqno = s.slice_last(32).preload_uint(32);
    int op = messagge~load_uint(32);
      
    if (op == 0x9df10277){
        
        slice ref = messagge~load_ref().begin_parse();
        int hash = slice_hash(ref);
        
        int qi = messagge~load_uint(64);
        slice sig = messagge~load_bits(512); 
        int lf = ref~load_uint(32) ;
        int nseqno = ref~load_uint(32);

        throw_if (119 , seqno + 1 != nseqno) ;
        throw_unless(120 , check_signature(hash,sig ,pkey));
        throw_if(121 , lf <= 0) ;
        throw_if(122 , etime < now());
        throw_if(123 , now() +  lf < etime);
        
        accept_message();

        seqno = nseqno ;
        etime =  now()+lf ;
        
 
 
        set_data(
            begin_cell().store_uint(pkey , 256).store_uint(etime , 32).store_slice(r ).store_uint(seqno , 32) .end_cell() 
        );

    }

    if (op == 0xbb4be234){
        throw_if(124 , etime <= now());
        accept_message();

        cell m = begin_cell()
            .store_uint(0x18 , 6).store_slice(r).store_grams(0).store_uint(0,1 + 4 + 4 + 64 + 32 + 1 + 1).end_cell();

        send_raw_message(m,128);

    }
    


}
(int) get_seqno() method_id {
    slice s = get_data().begin_parse() ;
    int seqno = s.slice_last(32).preload_uint(256);
    return seqno ;

}
(int) get_execution_time() method_id {
     slice s = get_data().begin_parse() ;
     int pkey = s~load_uint(256);
     int etime = s~load_uint(32);
     return etime ;
}

