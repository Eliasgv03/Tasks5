#include "imports/stdlib.fc";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    
    if (in_msg_body.slice_empty?()) { return (); }
    
    int op = in_msg_body~load_uint(32);


    slice msg = in_msg_full.begin_parse();
    msg~skip_bits(4);
    slice s = get_data().begin_parse();
    (int cad, int di) = s~load_msg_addr().parse_std_addr();
  
    cell dic = s~load_dict();

   if (op == 0x278205c8) {
        slice d2 = msg~load_msg_addr();
        (int cad, int di2) = d2.parse_std_addr();
        throw_if(120, di != di2);

        in_msg_body~skip_bits(64);
        d2 = in_msg_body~load_msg_addr();
        (int cad, int di3) = d2.parse_std_addr();

  throw_unless(121, dic~udict_delete?(256, di3));

        set_data(begin_cell()
      .store_uint(1 << 10, 11)
            .store_uint(di, 256)
            .store_dict(dic)
            .end_cell());   
  }  

  if (op == 0x368ddef3) {
        slice d2 = msg~load_msg_addr();
        (int cad, int di2) = d2.parse_std_addr();
        throw_if(120, di == di2);

        in_msg_body~load_uint(64);
        d2 = in_msg_body~load_msg_addr();
        (int cad, int di3) = d2.parse_std_addr();

        dic~udict_set(256, di3, in_msg_body);

        set_data(begin_cell()
      .store_uint(1 << 10, 11)
            .store_uint(di, 256)
            .store_dict(dic)
            .end_cell());   
  }
   if (op == 0x68530b3) {
  (int key, slice val, int n) = dic.udict_get_min?(256);
  throw_unless(122, n);
        int t = 0;
        while(n){
            t += val~load_uint(32);
            (key, val, n) = dic.udict_get_next?(256, key);
        } 
        (int key, slice val, int n) = dic.udict_get_min?(256);
        while(n){
            int u = val.slice_last(32).preload_uint(32);
            cell m = begin_cell()
                        .store_uint(0x18, 6)
                        .store_uint(1 << 10, 11)
                        .store_uint(key, 256)         
                        .store_coins(u * msg_value / t)
                        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)             
                    .end_cell();
            (key, val, n) = dic.udict_get_next?(256, key);
      send_raw_message(m,1);
        }
  }

 
} 
  